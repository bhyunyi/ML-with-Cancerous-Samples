---
title: "Filtering for Transcription Factors"
author: "Tiffany Tang"
date: "2025-07-17"
output: html_document
---

## Transcription Factor filtering code

the columns of the data frame needed to be filtered based on a list of known transcription factors
so the column names could of had a go term analysis done on it to get a list of transcripts that are transcription factors
then you use that list to filter the master tsv files
just reducing the number of columns to only include transcription factors


Reading in the data
```{r readin}
library(dplyr) # load necessary libraries
library(readr)

# Adjust path variables as needed
# pathBrian <- 
pathTiffany <- "C:\\Users\\tiffa\\OneDrive\\Desktop\\Masters in Bioinformatics\\Transcriptomics\\Final\\transformed_data.tsv"

# load in my data
# This part takes a bit since the file is so large!
expr_data <- read_tsv(pathTiffany)
```

Next we need to get a list of transcription factor transcripts. 

This can be done using GO term, 
- do this with biomaRt

```{r Go_list}
library(biomaRt) # install library

# Lets connect to ensemble
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")

#Extract transcript ID's from data, this is from the 4th column onwards
transcript_ids <- colnames(expr_data)[4:ncol(expr_data)]

# head(transcript_ids) # this is just to double check that we are grabbing only transcript IDs

# Get GO annotations for the transcript IDs
# This part takes a while! around 10 minutes
go_annotations <- getBM(
  attributes = c("ensembl_transcript_id", "go_id", "name_1006"),
  filters = "ensembl_transcript_id",
  values = transcript_ids,
  mart = ensembl
)
# head(go_annotations) # Just curious and wanted to take a look

# Filter for trancsription factors only!
# this is a case insensitive search
tf_go <- go_annotations %>%
  filter(grepl("transcription factor", name_1006, ignore.case = TRUE))

# Get the list of transcript IDs that are TFs
tf_transcripts <- tf_go$ensembl_transcript_id

# Lets get the list
# This filters the intersections between the GO list and our expression data!
expr_data_tf <- dplyr::select(expr_data, 1:3, all_of(intersect(colnames(expr_data), tf_transcripts)))


# just to look 
head(expr_data_tf)
```

Following this we want to save a file of only the transcription factors that appear in the GO search and in our expression matrix.

```{r tf_only}
# first extract just the transcription factor names
tf_enst_ids <- colnames(expr_data_tf)[4:ncol(expr_data_tf)]

# Write out the lines to a .txt file
# Please remember to edit the path!
#outpath_tfBrian <- 
outpath_tfTiffany <- "C:\\Users\\tiffa\\OneDrive\\Desktop\\Masters in Bioinformatics\\Transcriptomics\\Final\\tfOnly_list.txt"

write(tf_enst_ids, outpath_tfTiffany)
```

Save the filtered matrix
```{r }
# Please add the path to your variable below
# outpathBrian <- 
outpathTiffany <- "C:\\Users\\tiffa\\OneDrive\\Desktop\\Masters in Bioinformatics\\Transcriptomics\\Final\\tf_filtered.tsv"

# Save the filtered TF expression matrix 
write_tsv(expr_data_tf, outpathTiffany)
```