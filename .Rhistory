clustering_distance_cols = "euclidean",
clustering_method = "complete",
fontsize_row = 6,
fontsize_col = 10,
annotation_row = tf_status,
main = "Clustering of Significant Genes by Transcription Factor Status")
# Heat map plot code
pheatmap(sig_gene_mat_scaled,
show_rownames = FALSE,
show_colnames = TRUE,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
fontsize_row = 6,
fontsize_col = 10,
annotation_row = tf_status,
main = "Clustering of Significant Genes by Transcription Factor Status")
head(tf_status)
library(dplyr) # load necessary libraries
library(readr)
# Adjust path variables as needed
# pathBrian <-
pathTiffany <- "C:\\Users\\tiffa\\OneDrive\\Desktop\\Masters in Bioinformatics\\Transcriptomics\\Final\\significant_genes_limma.csv"
# load in my data
# This is for the significant genes!
sig_gene_data <- read_tsv(pathTiffany)
head(sig_gene_data)
# Load required library
library(pheatmap)
# Convert GeneID column to rownames
sig_gene_mat <- sig_gene_data
rownames(sig_gene_mat) <- sig_gene_mat$GeneID
sig_gene_mat <- sig_gene_mat[, -which(names(sig_gene_mat) == "GeneID")]
# Convert to matrix for heatmap as pheatmap requires matrix
sig_gene_mat <- as.matrix(sig_gene_mat)
# Scale the data
sig_gene_mat_scaled <- t(scale(t(sig_gene_mat)))
# Generate clustered heatmap
pheatmap(sig_gene_mat_scaled,
show_rownames = FALSE,     # Hide gene names because there are too many
show_colnames = TRUE,      # Show sample names
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
fontsize_row = 6,
fontsize_col = 10,
main = "Clustering of Significant Genes")
# read in tf only list
# Adjust path variables as needed
# pathBrian <-
pathTiffany <- "C:\\Users\\tiffa\\OneDrive\\Desktop\\Masters in Bioinformatics\\Transcriptomics\\Final\\tfOnly_list.txt"
# load in my data
tf_list <- read_tsv(pathTiffany, col_names = FALSE)
#Make it a vector
tf_list <- tf_list[[1]]
# Isolate significant gene IDs
gene_ids <- sig_gene_data$GeneID
# Create a logical vector indicating TF membership
is_tf <- gene_ids %in% tf_list
#Create dataframe to mark TF status
tf_status <- ifelse(is_tf, "TF", "Non-TF")
tf_status <- as.data.frame(tf_status)
rownames(tf_status) <- sig_gene_data$GeneID
# Heat map plot code
pheatmap(sig_gene_mat_scaled,
show_rownames = FALSE,
show_colnames = TRUE,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
fontsize_row = 6,
fontsize_col = 10,
annotation_row = tf_status,
main = "Clustering of Significant Genes by Transcription Factor Status")
class(tf_status)
all(rownames(sig_gene_mat_scaled) == rownames(tf_status))
unique(tf_status$tf_status)
# Heat map plot code
pheatmap(sig_gene_mat_scaled,
show_rownames = FALSE,
show_colnames = TRUE,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
fontsize_row = 6,
fontsize_col = 10,
annotation_row = tf_status,
annotation_colors = ann_colors,
main = "Clustering of Significant Genes by Transcription Factor Status")
colnames(tf_status)
# Adjust path variables as needed
# pathBrian <-
pathTiffany <- "C:\\Users\\tiffa\\OneDrive\\Desktop\\Masters in Bioinformatics\\Transcriptomics\\Final\\transformed_data.tsv"
# load in my data
expr_data <- read_tsv(pathTiffany)
head(expr_data)
# list of significant samples
sig_samples <- colnames(sig_gene_data)[-1]
# Subset expr_data to only rows used in heatmap
annotation_df <- as.data.frame(expr_data[expr_data$ID %in% sig_samples, c("ID", "type")])
# Make the sample IDs as the rownames
rownames(annotation_df) <- annotation_df$ID
# Remove the redundant row
annotation_df <- annotation_df[, "type", drop = FALSE]
# Create another column in this that lets us know if it is a cancer sample or not
# annotate the heat map based on this
annotation_df$CancerStatus <- ifelse(grepl("cancer", annotation_df$type, ignore.case = TRUE),
"Cancer", "Normal")
class(annotation_df)
head(annotation_df)
rownames(annotation_df)
class(tf_status)
rownames(tf_status)
pheatmap(sig_gene_mat_scaled,
show_rownames = FALSE,
show_colnames = TRUE,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
fontsize_row = 6,
fontsize_col = 10,
annotation_row = tf_status,
main = "Clustering of Significant Genes")
# Heat map plot code
# annotation colors
ann_colors <- list(
TF_Status = c("TF" = "red", "Non-TF" = "grey")
)
pheatmap(sig_gene_mat_scaled,
show_rownames = FALSE,
show_colnames = TRUE,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
fontsize_row = 6,
fontsize_col = 10,
annotation_row = tf_status,
annotation_colors = ann_colors,
main = "Clustering of Significant Genes")
str(tf_status)
colnames(tf_status)
colnames(tf_status) <- TF_status
colnames(tf_status) <- "TF_status"
pheatmap(sig_gene_mat_scaled,
show_rownames = FALSE,
show_colnames = TRUE,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
fontsize_row = 6,
fontsize_col = 10,
annotation_row = tf_status,
annotation_colors = ann_colors,
main = "Clustering of Significant Genes")
colnames(tf_status) <- "TF_Status"
ann_colors <- list(
TF_Status = c("TF" = "red", "Non-TF" = "grey")
)
pheatmap(sig_gene_mat_scaled,
show_rownames = FALSE,
show_colnames = TRUE,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
fontsize_row = 6,
fontsize_col = 10,
annotation_row = tf_status,
annotation_colors = ann_colors,
main = "Clustering of Significant Genes")
# Remove any accidental whitespace
tf_status$TF_Status <- trimws(tf_status$TF_Status)
# Heat map plot code
# annotation colors
ann_colors <- list(
TF_Status = c("TF" = "red", "Non-TF" = "grey")
)
pheatmap(sig_gene_mat_scaled,
show_rownames = FALSE,
show_colnames = TRUE,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
fontsize_row = 6,
fontsize_col = 10,
annotation_row = tf_status,
annotation_colors = ann_colors,
main = "Clustering of Significant Genes")
colnames(tf_status)
unique(tf_status$TF_Status)
str(ann_colors)
rownames(tf_status) <- sig_gene_mat_scaled
rownames(tf_status) <- rownames(sig_gene_mat_scaled)
pheatmap(sig_gene_mat_scaled,
show_rownames = FALSE,
show_colnames = TRUE,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
fontsize_row = 6,
fontsize_col = 10,
annotation_row = tf_status,
annotation_colors = ann_colors,
main = "Clustering of Significant Genes")
class(annotation_df)
# list of significant samples
sig_samples <- colnames(sig_gene_data)[-1]
# Subset expr_data to only rows used in heatmap
annotation_df <- as.data.frame(expr_data[expr_data$ID %in% sig_samples, c("ID", "type")])
# Make the sample IDs as the rownames
rownames(annotation_df) <- annotation_df$ID
# Remove the redundant row
annotation_df <- annotation_df[, "type", drop = FALSE]
# Create another column in this that lets us know if it is a cancer sample or not
# annotate the heat map based on this
annotation_df$CancerStatus <- ifelse(grepl("cancer", annotation_df$type, ignore.case = TRUE),
"Cancer", "Normal")
head(annotation_df)
pheatmap(sig_gene_mat_scaled,
show_rownames = TRUE,
show_colnames = FALSE,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
fontsize_row = 6,
fontsize_col = 10,
annotation_row = tf_status,
annotation_colors = ann_colors,
main = "Clustering of Significant Genes")
tf_status <- as.data.matrix(tf_status)
tf_status <- data.matrix(tf_status)
head(tf_status)
rownames(tf_status) <- rownames(sig_gene_mat_scaled)
head(tf_status)
# Heat map plot code
pheatmap(sig_gene_mat_scaled,
show_rownames = TRUE,
show_colnames = FALSE,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
fontsize_row = 6,
fontsize_col = 10,
annotation_row = tf_status,
main = "Clustering of Significant Genes")
help(annotation_row)
# Isolate significant gene IDs
gene_ids <- sig_gene_data$GeneID
# Create a logical vector indicating TF membership
is_tf <- gene_ids %in% tf_list
#Create dataframe to mark TF status
tf_status <- ifelse(is_tf, "TF", "Non-TF")
rownames(tf_status) <- rownames(sig_gene_mat_scaled)
colnames(tf_status) <- "TF_Status"
# Adjust path variables as needed
# pathBrian <-
pathTiffany <- "C:\\Users\\tiffa\\OneDrive\\Desktop\\Masters in Bioinformatics\\Transcriptomics\\Final\\tfOnly_list.txt"
# load in my data
tf_list <- read_tsv(pathTiffany, col_names = FALSE)
#Make it a vector
tf_list <- tf_list[[1]]
# Isolate significant gene IDs
gene_ids <- sig_gene_data$GeneID
# Create a logical vector indicating TF membership
is_tf <- gene_ids %in% tf_list
#Create dataframe to mark TF status
tf_status <- ifelse(is_tf, "TF", "Non-TF")
rownames(tf_status) <- rownames(sig_gene_mat_scaled)
colnames(tf_status) <- "TF_Status"
head(tf_status)
class(tf_status)
#Create dataframe to mark TF status
tf_status <- as.data.frame(ifelse(is_tf, "TF", "Non-TF"))
rownames(tf_status) <- rownames(sig_gene_mat_scaled)
colnames(tf_status) <- "TF_Status"
# Heat map plot code
pheatmap(sig_gene_mat_scaled,
show_rownames = TRUE,
show_colnames = FALSE,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
fontsize_row = 6,
fontsize_col = 10,
annotation_row = tf_status,
main = "Clustering of Significant Genes")
str(tf_status)
all(rownames(tf_status) == rownames(sig_gene_mat_scaled))
# Check that rownames match exactly
all(rownames(tf_status) == rownames(sig_gene_mat_scaled))  # Should be TRUE
# Check your annotation column name
colnames(tf_status)  # Should be exactly "TF_Status"
# Check unique annotation values (no extra spaces)
unique(tf_status$TF_Status)  # Should be exactly "TF" and "Non-TF"
rm(annotation_colors)  # Remove any leftover annotation_colors variable
# Heat map plot code
pheatmap(sig_gene_mat_scaled,
show_rownames = TRUE,
show_colnames = FALSE,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
fontsize_row = 6,
fontsize_col = 10,
annotation_row = tf_status,
main = "Clustering of Significant Genes")
# Subset the significant gene data to TF-only rows
sig_TF_data <- sig_gene_data %>% filter(GeneID %in% tf_list)
# Set rownames and drop GeneID column
rownames(sig_TF_data) <- sig_TF_data$GeneID
sig_TF_data <- sig_TF_data[, -which(names(sig_TF_data) == "GeneID")]
# Convert to matrix
sig_TF_mat <- as.matrix(sig_TF_data)
# Scale the rows (genes)
sig_TF_mat_scaled <- t(scale(t(sig_TF_mat)))
# Create annotation for samples (reuse annotation_df from earlier)
# Make sure it includes only the relevant samples (columns in sig_TF_mat_scaled)
annotation_df_TF <- annotation_df[colnames(sig_TF_mat_scaled), , drop = FALSE]
# Plot the heatmap
pheatmap(sig_TF_mat_scaled,
show_rownames = TRUE,
show_colnames = TRUE,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
fontsize_row = 6,
fontsize_col = 10,
annotation_col = annotation_df_TF,
main = "Clustering of Significant Transcription Factor Genes")
# Transpose for PCA (samples as rows)
sig_gene_pca_input <- t(sig_gene_mat_scaled)
# Perform PCA
pca_res <- prcomp(sig_gene_pca_input, scale. = FALSE)
# Make data frame for plotting
pca_df <- as.data.frame(pca_res$x)
pca_df$SampleID <- rownames(pca_df)
pca_df <- left_join(pca_df, annotation_df, by = c("SampleID" = "ID"))
# Transpose for PCA (samples as rows)
sig_gene_pca_input <- t(sig_gene_mat_scaled)
# Perform PCA
pca_res <- prcomp(sig_gene_pca_input, scale. = FALSE)
# Make data frame for plotting
pca_df <- as.data.frame(pca_res$x)
pca_df$SampleID <- rownames(pca_df)
# Add CancerStatus from annotation_df by rownames
pca_df$CancerStatus <- annotation_df[pca_df$SampleID, "CancerStatus"]
# Plot
library(ggplot2)
ggplot(pca_df, aes(x = PC1, y = PC2, color = CancerStatus)) +
geom_point(size = 3) +
theme_minimal() +
labs(title = "PCA of Significant Genes",
x = paste0("PC1 (", round(summary(pca_res)$importance[2,1]*100, 1), "%)"),
y = paste0("PC2 (", round(summary(pca_res)$importance[2,2]*100, 1), "%)"))
# Transpose for PCA
sig_gene_pca_input <- t(sig_gene_mat_scaled)
# Perform PCA
pca_res <- prcomp(sig_gene_pca_input, scale. = FALSE)
# Make data frame for plotting
pca_df <- as.data.frame(pca_res$x)
pca_df$SampleID <- rownames(pca_df)
# Add CancerStatus from annotation_df by rownames
pca_df$CancerStatus <- annotation_df[pca_df$SampleID, "CancerStatus"]
# Plot
library(ggplot2)
ggplot(pca_df, aes(x = PC1, y = PC2, color = CancerStatus)) +
geom_point(size = 3) +
theme_minimal() +
labs(title = "PCA of Significant Genes",
x = paste0("PC1 (", round(summary(pca_res)$importance[2,1]*100, 1), "%)"),
y = paste0("PC2 (", round(summary(pca_res)$importance[2,2]*100, 1), "%)"))
# Transpose TF matrix (samples as rows, genes as columns)
sig_TF_pca_input <- t(sig_TF_mat_scaled)
# Perform PCA
pca_tf_res <- prcomp(sig_TF_pca_input, scale. = FALSE)
# Create PCA data frame
pca_tf_df <- as.data.frame(pca_tf_res$x)
pca_tf_df$SampleID <- rownames(pca_tf_df)
# Add CancerStatus from annotation_df by sample ID
pca_tf_df$CancerStatus <- annotation_df[pca_tf_df$SampleID, "CancerStatus"]
# Plot PCA
ggplot(pca_tf_df, aes(x = PC1, y = PC2, color = CancerStatus)) +
geom_point(size = 3) +
theme_minimal() +
labs(title = "PCA of Significant Transcription Factor Genes",
x = paste0("PC1 (", round(summary(pca_tf_res)$importance[2,1]*100, 1), "%)"),
y = paste0("PC2 (", round(summary(pca_tf_res)$importance[2,2]*100, 1), "%)"))
head(sig_TF_pca_input)
head(sig_gene_pca_input)
# Transpose for PCA
sig_gene_pca_input <- t(sig_gene_data)
# Perform PCA
pca_res <- prcomp(sig_gene_pca_input, scale. = FALSE)
head(sig_gene_pca_input)
sig_gene_pca_input <- t(sig_gene_mat_scaled)
head(sig_gene_pca_input)
class(sig_gene_pca_input)
class(sig_gene_data)
sig_gene_pca_input <- t(sig_gene_data)
class(sig_gene_pca_input)
sig_gene_pca_input <- as.data.frame(t(sig_gene_data)
sig_gene_pca_input <- as.data.frame(t(sig_gene_data))
# Transpose for PCA
sig_gene_pca_input <- as.data.frame(t(sig_gene_data))
# Perform PCA
pca_res <- prcomp(sig_gene_pca_input, scale. = FALSE)
str(sig_gene_pca_input)
sig_pca <- sig_gene_data
rownames(sig_pca) <- sig_pca$GeneID
sig_pca <- sig_pca[, -which(colnames(sig_pca)=="GeneID")]
# set up data for PCA
sig_pca <- sig_gene_data
# Set col gene ID to the row names and dete
rownames(sig_pca) <- sig_pca$GeneID
sig_pca <- sig_pca[, -which(colnames(sig_pca)=="GeneID")]
sig_gene_pca_input<- t(sig_pca)
# Perform PCA
pca_res <- prcomp(sig_gene_pca_input, scale. = FALSE)
# Make data frame for plotting
pca_df <- as.data.frame(pca_res$x)
pca_df$SampleID <- rownames(pca_df)
# Add CancerStatus from annotation_df by rownames
pca_df$CancerStatus <- annotation_df[pca_df$SampleID, "CancerStatus"]
# Plot
library(ggplot2)
ggplot(pca_df, aes(x = PC1, y = PC2, color = CancerStatus)) +
geom_point(size = 3) +
theme_minimal() +
labs(title = "PCA of Significant Genes",
x = paste0("PC1 (", round(summary(pca_res)$importance[2,1]*100, 1), "%)"),
y = paste0("PC2 (", round(summary(pca_res)$importance[2,2]*100, 1), "%)"))
head(pca_df)
head(annotation_df)
# Add CancerStatus from annotation_df by rownames
pca_df$CancerType <- annotation_df[pca_df$SampleID, "type"]
# Plot
library(ggplot2)
ggplot(pca_df, aes(x = PC1, y = PC2, color = CancerStatus)) +
geom_point(size = 3) +
theme_minimal() +
labs(title = "PCA of Significant Genes",
x = paste0("PC1 (", round(summary(pca_res)$importance[2,1]*100, 1), "%)"),
y = paste0("PC2 (", round(summary(pca_res)$importance[2,2]*100, 1), "%)"))
# Add CancerStatus from annotation_df by rownames
pca_df$CancerType <- annotation_df[pca_df$SampleID, "type"]
# Plot
library(ggplot2)
ggplot(pca_df, aes(x = PC1, y = PC2, color = CancerType)) +
geom_point(size = 3) +
theme_minimal() +
labs(title = "PCA of Significant Genes",
x = paste0("PC1 (", round(summary(pca_res)$importance[2,1]*100, 1), "%)"),
y = paste0("PC2 (", round(summary(pca_res)$importance[2,2]*100, 1), "%)"))
head(sig_TF_data)
# Subset the significant gene data to TF-only rows
sig_TF_data <- sig_gene_data %>% filter(GeneID %in% tf_list)
# Set rownames and drop GeneID column
rownames(sig_TF_data) <- sig_TF_data$GeneID
sig_TF_data <- sig_TF_data[, -which(names(sig_TF_data) == "GeneID")]
sig_tf_pca <- as.data.frame(sig_gene_data %>% filter(GeneID %in% tf_list))
head(sig_tf_pca)
# Subset the significant gene data to TF-only rows
sig_TF_data <- as.data.frame(sig_gene_data %>% filter(GeneID %in% tf_list))
# Set rownames and drop GeneID column
rownames(sig_TF_data) <- sig_TF_data$GeneID
sig_TF_data <- sig_TF_data[, -which(names(sig_TF_data) == "GeneID")]
# Convert to matrix
sig_TF_mat <- as.matrix(sig_TF_data)
# Scale the rows (genes)
sig_TF_mat_scaled <- t(scale(t(sig_TF_mat)))
# Create annotation for samples
# Make sure it includes only the relevant samples
annotation_df_TF <- annotation_df[colnames(sig_TF_mat_scaled), , drop = FALSE]
# Plot the heatmap
pheatmap(sig_TF_mat_scaled,
show_rownames = TRUE,
show_colnames = TRUE,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
fontsize_row = 6,
fontsize_col = 10,
annotation_col = annotation_df_TF,
main = "Clustering of Significant Transcription Factor Genes")
# Subset the significant gene data to TF-only rows
sig_TF_data <- as.data.frame(sig_gene_data %>% filter(GeneID %in% tf_list))
# Set rownames and drop GeneID column
rownames(sig_TF_data) <- sig_TF_data$GeneID
sig_TF_data <- sig_TF_data[, -which(names(sig_TF_data) == "GeneID")]
# Convert to matrix
sig_TF_mat <- as.matrix(sig_TF_data)
# Scale the rows (genes)
sig_TF_mat_scaled <- t(scale(t(sig_TF_mat)))
# Create annotation for samples
# Make sure it includes only the relevant samples
annotation_df_TF <- annotation_df[colnames(sig_TF_mat_scaled), , drop = FALSE]
# Plot the heatmap
pheatmap(sig_TF_mat_scaled,
show_rownames = FALSE,
show_colnames = TRUE,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
fontsize_row = 6,
fontsize_col = 10,
annotation_col = annotation_df_TF,
main = "Clustering of Significant Transcription Factor Genes")
# Set data
sig_tf_pca <- as.data.frame(sig_gene_data %>% filter(GeneID %in% tf_list))
# Set rownames and drop GeneID column
rownames(sig_tf_pca) <- sig_tf_pca$GeneID
sig_tf_pca <- sig_tf_pca[, -which(names(sig_tf_pca) == "GeneID")]
head(sig_tf_pca)
